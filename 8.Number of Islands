def numIslands(grid):
    if not grid:
        return 0
    def dfs(r, c):
        stack = [(r, c)]
        visit.add((r, c))
        while stack:
            row, col = stack.pop()
            directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
            for dr, dc in directions:
                r, c = row + dr, col + dc
                if (
                    0 <= r < len(grid) and
                    0 <= c < len(grid[0]) and
                    grid[r][c] == '1' and
                    (r, c) not in visit
                ):
                    visit.add((r, c))
                    stack.append((r, c))
    count = 0
    visit = set()
    rows, cols = len(grid), len(grid[0])
    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == '1' and (r, c) not in visit:
                dfs(r, c)
                count += 1
    return count
rows = int(input("Enter number of rows: "))
cols = int(input("Enter number of columns: "))
print(f"Enter the grid row by row (only 0 or 1, space-separated):")
grid = []
for _ in range(rows):
    row = input().split()
    if len(row) != cols or any(c not in ('0', '1') for c in row):
        print("Invalid input. Please enter exactly", cols, "values of 0 or 1.")
        exit()
    grid.append(row)
print("Number of islands:", numIslands(grid))
