class ListNode:
    def __init__(self,val=0,next=None):
        self.val=val
        self.next=next
class Solution:
    def hasCycle(self,head):
        slow=fast=head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
            if slow==fast:
                return True
        return False
def create_linked_list_with_cycle(values,pos):
    if not values:
        return None
    head=ListNode(values[0])
    node_map={0:head}
    current=head
    for i in range(1,len(values)):
        current.next=ListNode(values[i])
        current=current.next
        node_map[i]=current
    if pos!=-1:
        current.next=node_map[pos]
    return head

values=list(map(int,input("Enter the list elements seperated by space:").split()))
pos=int(input("Enter position(0-based index) to forn cycle (-1 for no cycle):"))
head=create_linked_list_with_cycle(values,pos)
solution=Solution()
result=solution.hasCycle(head)
print("Cycle Detected:" if result else "No Cycle detected")
